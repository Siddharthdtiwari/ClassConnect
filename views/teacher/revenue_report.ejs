<%- include('../partials/background') %>
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Revenue Dashboard | <%= selectedYear %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f3f4f6;
      background-image: linear-gradient(120deg, #f3e8ff 0%, #eef2f3 100%);
    }

    .text-brand-purple {
      color: #5d3a9b;
    }

    .bg-brand-purple {
      background-color: #5d3a9b;
    }

    .border-brand-purple {
      border-color: #5d3a9b;
    }

    .text-brand-lime {
      color: #bde045;
    }

    .bg-brand-lime {
      background-color: #bde045;
    }

    .border-brand-lime {
      border-color: #bde045;
    }

    .focus\:border-brand-purple:focus {
      border-color: #5d3a9b;
    }

    .focus\:ring-brand-purple:focus {
      --tw-ring-color: #5d3a9b;
    }

    .focus\:ring-opacity-40:focus {
      --tw-ring-opacity: 0.4;
    }

    .recent-list-static>div:nth-child(odd) {
      background-color: #fcfcfc;
    }

    .recent-list-static>div:hover {
      background-color: #f3f8fe;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
</head>

<body class="text-gray-800">

  <div id="chart-data-container" data-standard-keys='<%- JSON.stringify(Object.keys(standardStats)) %>' data-standard-totals='<%- JSON.stringify(Object.values(standardStats).map(s => s.total)) %>' data-chart-months='<%- JSON.stringify(months) %>' data-monthly-revenue='<%- JSON.stringify(monthlyRevenue) %>' data-method-keys='<%- JSON.stringify(Object.keys(methodStats)) %>' data-method-values='<%- JSON.stringify(Object.values(methodStats)) %>' style="display: none;">
  </div>

  <div class="content-container container mx-auto p-4 sm:p-8 min-h-screen">

    <header class="mb-8 border-b border-gray-200 pb-4 flex justify-between items-center">
      <div>
        <a href="/teacher/manage_fees" class="text-sm text-brand-purple hover:underline mb-2 block">&larr; Back to Fee</a>
        <h1 class="text-4xl font-extrabold text-gray-900 mt-1">Revenue Dashboard</h1>
      </div>
      <form method="GET" action="/teacher/revenue_report" class="max-w-xs">
        <label for="year" class="block text-xs font-semibold text-gray-600 uppercase mb-1">Data Year</label>
        <select name="year" id="year" onchange="this.form.submit()" class="block w-full rounded-lg border-gray-300 shadow-md text-base py-2 px-3 focus:border-brand-purple focus:ring focus:ring-brand-purple focus:ring-opacity-40 transition-shadow">
          <% years.forEach(y => { %>
          <option value="<%= y %>" <%= y === selectedYear ? 'selected' : '' %>><%= y %></option>
          <% }) %>
        </select>
      </form>
    </header>

    <div class="content-container grid grid-cols-1 lg:grid-cols-3 gap-8">

      <div class="lg:col-span-2 space-y-8">

        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="bg-white p-6 rounded-xl shadow-xl border-l-4 border-green-500 transform hover:scale-[1.02] transition-transform">
            <p class="text-sm font-semibold text-green-600 uppercase">Total Revenue (<%= selectedYear %>)</p>
            <p class="text-5xl font-extrabold mt-2 text-gray-900">₹<%= totalRevenue.toLocaleString() %></p>
            <p class="text-xs text-gray-500 mt-2">All fees collected.</p>
          </div>
          <div class="bg-white p-6 rounded-xl shadow-md border-l-4 border-brand-purple">
            <p class="text-sm font-semibold text-brand-purple uppercase">Total Transactions</p>
            <p class="text-4xl font-bold mt-2 text-gray-900"><%= paymentCount.toLocaleString() %></p>
            <p class="text-xs text-gray-500 mt-2">Individual payments recorded.</p>
          </div>
          <div class="bg-white p-6 rounded-xl shadow-md border-l-4 border-brand-lime">
            <p class="text-sm font-semibold text-brand-lime uppercase">Avg. Payment Value</p>
            <p class="text-4xl font-bold mt-2 text-gray-900">₹<%= averageRevenue.toLocaleString() %></p>
            <p class="text-xs text-gray-500 mt-2">Avg. transaction value.</p>
          </div>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-xl">
          <h2 class="text-xl font-bold text-gray-900 mb-4 border-b border-gray-100 pb-2">Monthly Revenue Trend</h2>
          <canvas id="monthlyChart" height="120"></canvas>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-xl">
          <h2 class="text-xl font-bold text-gray-900 mb-4 border-b border-gray-100 pb-2">Revenue by Class/Standard</h2>
          <canvas id="classRevenueChart" height="140"></canvas>
        </div>
      </div>

      <div class="lg:col-span-1 space-y-8">

        <div class="bg-white p-6 rounded-xl shadow-xl">
          <h2 class="text-xl font-bold text-gray-900 mb-6">Payment Methods</h2>
          <div class="flex flex-col items-center">
            <div class="w-48 h-48 mb-6">
              <canvas id="methodChart"></canvas>
            </div>
            <div class="text-sm w-full space-y-2">
              <% Object.keys(methodStats).forEach(method => { 
                                const total = Object.values(methodStats).reduce((a, b) => a + b, 0);
                                const count = methodStats[method];
                                const percentage = (count / total * 100).toFixed(1);
                            %>
              <div class="flex justify-between border-b pb-1">
                <span class="font-medium text-gray-600"><%= method %></span>
                <span class="font-bold text-gray-900"><%= percentage %>%</span>
              </div>
              <% }) %>
            </div>
          </div>
        </div>

        <div class="bg-white p-6 rounded-xl shadow-xl">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Recent Transactions</h2>

          <div class="recent-list-static divide-y divide-gray-100">
            <% 
                            // Determine the limit: show up to 10 transactions
                            const transactionLimit = 10;
                            const transactionsToShow = recentPayments.slice(0, transactionLimit);

                            transactionsToShow.forEach(p => { 
                                const dateString = new Date(p.datePaid).toLocaleDateString(); 
                                const amountString = '₹' + p.amount.toLocaleString();
                            %>
            <div class="flex justify-between items-center py-3">
              <div class="flex flex-col">
                <span class="text-sm font-semibold"><%= p.studentName %></span>
                <span class="text-xs text-gray-500"><%= p.standard %> • <%= p.method %></span>
              </div>
              <div class="flex flex-col items-end">
                <span class="text-sm font-bold text-green-600"><%= amountString %></span>
                <span class="text-xs text-gray-400"><%= dateString %></span>
              </div>
            </div>
            <% }) %>

            <% if (recentPayments.length > transactionLimit) { %>
            <div class="text-center pt-3 mt-2 text-sm text-gray-500">
              Showing the last <%= transactionLimit %> transactions.
            </div>
            <% } else if (recentPayments.length === 0) { %>
            <div class="text-center pt-3 mt-2 text-sm text-gray-500">
              No transactions found for <%= selectedYear %>.
            </div>
            <% } %>

          </div>

        </div>
      </div>
    </div>
  </div>

  <script>
    // === RETRIEVING DATA FROM HIDDEN ELEMENT (FIXED) ===
    const dataContainer = document.getElementById('chart-data-container');

    const standardStatsKeys = JSON.parse(dataContainer.dataset.standardKeys);
    const standardStatsTotals = JSON.parse(dataContainer.dataset.standardTotals);

    const chartMonths = JSON.parse(dataContainer.dataset.chartMonths);
    const chartMonthlyRevenue = JSON.parse(dataContainer.dataset.monthlyRevenue);

    const methodStatsKeys = JSON.parse(dataContainer.dataset.methodKeys);
    const methodStatsValues = JSON.parse(dataContainer.dataset.methodValues);

    // === COLOR PALETTE DEFINITION ===
    const primaryColor = '#5d3a9b'; // Brand Purple
    const accentColor = '#bde045'; // Brand Lime
    const successColor = '#10b981'; // Green-500 for Revenue
    const warningColor = '#f59e0b'; // Amber-500
    const neutralColor = '#94a3b8'; // Slate-400

    // === CHARTJS CONFIGURATION ===

    // Class Revenue Chart
    new Chart(document.getElementById('classRevenueChart'), {
      type: 'bar',
      data: {
        labels: standardStatsKeys,
        datasets: [{
          label: 'Revenue (₹)',
          data: standardStatsTotals,
          backgroundColor: [
            primaryColor, accentColor, successColor, warningColor, neutralColor
          ],
          borderRadius: 6
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f3f4f6'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });

    // Payment Methods Chart
    new Chart(document.getElementById('methodChart'), {
      type: 'doughnut',
      data: {
        labels: methodStatsKeys,
        datasets: [{
          data: methodStatsValues,
          backgroundColor: [primaryColor, accentColor, successColor, warningColor],
          borderWidth: 1,
          hoverOffset: 4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: '70%',
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                let label = context.label || '';
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const currentValue = context.parsed;
                const percentage = ((currentValue / total) * 100).toFixed(1) + '%';
                return label + ': ' + percentage;
              }
            }
          }
        }
      }
    });


    // Monthly Revenue Chart
    new Chart(document.getElementById('monthlyChart'), {
      type: 'line',
      data: {
        labels: chartMonths,
        datasets: [{
          label: 'Revenue (₹)',
          data: chartMonths.map(m => chartMonthlyRevenue[m] || 0),
          borderColor: primaryColor,
          backgroundColor: 'rgba(93, 58, 155, 0.1)', // Light tint of purple
          tension: 0.35,
          fill: true,
          pointBackgroundColor: primaryColor,
          pointRadius: 4,
          pointHoverRadius: 7
        }]
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: '#f3f4f6'
            }
          },
          x: {
            grid: {
              display: false
            }
          }
        }
      }
    });
  </script>
</body>

</html>